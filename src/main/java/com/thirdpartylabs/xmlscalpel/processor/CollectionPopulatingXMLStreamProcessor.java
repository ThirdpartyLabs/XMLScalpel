/*
 * XMLScalpel random access XML processor
 *
 * Copyright (c) 2020- Rob Ruchte, rob@thirdpartylabs.com
 *
 * Licensed under the License specified in file LICENSE, included with the source code.
 * You may not use this file except in compliance with the License.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.thirdpartylabs.xmlscalpel.processor;

import com.thirdpartylabs.xmlscalpel.entity.Fragment;

import java.util.Collection;

/**
 * Fill a collection with Fragment objects as they are generated by the StreamingXMLReader
 * Tracks progress through the file as the reader extracts nodes
 */
public class CollectionPopulatingXMLStreamProcessor implements XMLStreamProcessor
{
    private final Collection<Fragment> collection;
    private long bytesRead;
    private long bytesTotal;
    private int numProcessed = 0;

    /**
     * @param collection the collection to be populated
     */
    public CollectionPopulatingXMLStreamProcessor(Collection<Fragment> collection)
    {
        this.collection = collection;
    }

    /**
     * Called by the StreamingXMLReader as each node is extracted from the file
     * Adds the Fragment to the collection set via the constructor and updates the bytes read and number
     * of items processed
     * @param fragment Wrapper object that contains a DocumentFragment and an XMLByteLocation object
     */
    @Override
    public void process(Fragment fragment)
    {
        collection.add(fragment);

        bytesRead = fragment.getXmlByteLocation().getOffset()+fragment.getXmlByteLocation().getLength();
        numProcessed++;
    }

    /**
     * Called by the StreamingXMLReader when the reading starts
     * @param bytesTotal The total number of bytes in the file being processed
     */
    @Override
    public void setBytesTotal(long bytesTotal)
    {
        this.bytesTotal = bytesTotal;
    }

    /**
     * @return The number of bytes left to process
     */
    public long getBytesRemaining()
    {
        return (bytesTotal - bytesRead);
    }

    /**
     * @return Total number of bytes in the XML file being parsed, as set by the StreamingXMLReader
     */
    public long getBytesTotal()
    {
        return bytesTotal;
    }

    /**
     * @return Number of bytes that have been read by the StreamingXMLReader
     */
    public long getBytesRead()
    {
        return bytesRead;
    }

    /**
     * @return The number of nodes processed. Updated as each node is extracted
     */
    public int getNumProcessed()
    {
        return numProcessed;
    }
}

